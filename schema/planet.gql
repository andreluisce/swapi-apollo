type PlanetAttributes {
  diameter: String
  rotationPeriod: String
  orbitalPeriod: String
  gravity: String
  population: String
  climates: [String]
  terrains: [String]
  surfaceWater: String
}

type PlanetAssociations {
  residents: [Person]
  films: [Film]
}
type Planet implements Node {
  id: ID!
  name: String
  entity: EntityEnum
  imageEntity: ImageEntity
  attributes: PlanetAttributes
  associations: PlanetAssociations
}

type Query {
  allPlanets(search: String, offset: Int, limit: Int): [Planet]
  planet(id: ID): Planet
}
